// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Approval extends ethereum.Event {
  get params(): Approval__Params {
    return new Approval__Params(this);
  }
}

export class Approval__Params {
  _event: Approval;

  constructor(event: Approval) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get spender(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class CallUnstake extends ethereum.Event {
  get params(): CallUnstake__Params {
    return new CallUnstake__Params(this);
  }
}

export class CallUnstake__Params {
  _event: CallUnstake;

  constructor(event: CallUnstake) {
    this._event = event;
  }

  get controller(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class FeeActualized extends ethereum.Event {
  get params(): FeeActualized__Params {
    return new FeeActualized__Params(this);
  }
}

export class FeeActualized__Params {
  _event: FeeActualized;

  constructor(event: FeeActualized) {
    this._event = event;
  }

  get _manager(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _managerFee(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class IndexBurn extends ethereum.Event {
  get params(): IndexBurn__Params {
    return new IndexBurn__Params(this);
  }
}

export class IndexBurn__Params {
  _event: IndexBurn;

  constructor(event: IndexBurn) {
    this._event = event;
  }

  get sender(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get indexAmount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get baseAmount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class IndexDeposit extends ethereum.Event {
  get params(): IndexDeposit__Params {
    return new IndexDeposit__Params(this);
  }
}

export class IndexDeposit__Params {
  _event: IndexDeposit;

  constructor(event: IndexDeposit) {
    this._event = event;
  }

  get depositor(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get depoositors(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get externalPool(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class IndexInternalDeposit extends ethereum.Event {
  get params(): IndexInternalDeposit__Params {
    return new IndexInternalDeposit__Params(this);
  }
}

export class IndexInternalDeposit__Params {
  _event: IndexInternalDeposit;

  constructor(event: IndexInternalDeposit) {
    this._event = event;
  }

  get depositor(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get internalPool(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Paused extends ethereum.Event {
  get params(): Paused__Params {
    return new Paused__Params(this);
  }
}

export class Paused__Params {
  _event: Paused;

  constructor(event: Paused) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class RoleAdminChanged extends ethereum.Event {
  get params(): RoleAdminChanged__Params {
    return new RoleAdminChanged__Params(this);
  }
}

export class RoleAdminChanged__Params {
  _event: RoleAdminChanged;

  constructor(event: RoleAdminChanged) {
    this._event = event;
  }

  get role(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get previousAdminRole(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get newAdminRole(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }
}

export class RoleGranted extends ethereum.Event {
  get params(): RoleGranted__Params {
    return new RoleGranted__Params(this);
  }
}

export class RoleGranted__Params {
  _event: RoleGranted;

  constructor(event: RoleGranted) {
    this._event = event;
  }

  get role(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get account(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get sender(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class RoleRevoked extends ethereum.Event {
  get params(): RoleRevoked__Params {
    return new RoleRevoked__Params(this);
  }
}

export class RoleRevoked__Params {
  _event: RoleRevoked;

  constructor(event: RoleRevoked) {
    this._event = event;
  }

  get role(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get account(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get sender(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class Stake extends ethereum.Event {
  get params(): Stake__Params {
    return new Stake__Params(this);
  }
}

export class Stake__Params {
  _event: Stake;

  constructor(event: Stake) {
    this._event = event;
  }

  get depositors(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get stake(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get externalPool(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Transfer extends ethereum.Event {
  get params(): Transfer__Params {
    return new Transfer__Params(this);
  }
}

export class Transfer__Params {
  _event: Transfer;

  constructor(event: Transfer) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Unpaused extends ethereum.Event {
  get params(): Unpaused__Params {
    return new Unpaused__Params(this);
  }
}

export class Unpaused__Params {
  _event: Unpaused;

  constructor(event: Unpaused) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class Unstake extends ethereum.Event {
  get params(): Unstake__Params {
    return new Unstake__Params(this);
  }
}

export class Unstake__Params {
  _event: Unstake;

  constructor(event: Unstake) {
    this._event = event;
  }

  get controller(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class BrightRiskToken__externalPoolByDepositorResult {
  value0: BigInt;
  value1: boolean;
  value2: BigInt;

  constructor(value0: BigInt, value1: boolean, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromBoolean(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }
}

export class BrightRiskToken__feeStateResult {
  value0: Address;
  value1: BigInt;
  value2: BigInt;

  constructor(value0: Address, value1: BigInt, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }
}

export class BrightRiskToken extends ethereum.SmartContract {
  static bind(address: Address): BrightRiskToken {
    return new BrightRiskToken("BrightRiskToken", address);
  }

  DEFAULT_ADMIN_ROLE(): Bytes {
    let result = super.call(
      "DEFAULT_ADMIN_ROLE",
      "DEFAULT_ADMIN_ROLE():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_DEFAULT_ADMIN_ROLE(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "DEFAULT_ADMIN_ROLE",
      "DEFAULT_ADMIN_ROLE():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  DOMAIN_SEPARATOR(): Bytes {
    let result = super.call(
      "DOMAIN_SEPARATOR",
      "DOMAIN_SEPARATOR():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_DOMAIN_SEPARATOR(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "DOMAIN_SEPARATOR",
      "DOMAIN_SEPARATOR():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  TOKEN_ADMIN_ROLE(): Bytes {
    let result = super.call(
      "TOKEN_ADMIN_ROLE",
      "TOKEN_ADMIN_ROLE():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_TOKEN_ADMIN_ROLE(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "TOKEN_ADMIN_ROLE",
      "TOKEN_ADMIN_ROLE():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  TOKEN_OPERATOR_ROLE(): Bytes {
    let result = super.call(
      "TOKEN_OPERATOR_ROLE",
      "TOKEN_OPERATOR_ROLE():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_TOKEN_OPERATOR_ROLE(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "TOKEN_OPERATOR_ROLE",
      "TOKEN_OPERATOR_ROLE():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  allowance(owner: Address, spender: Address): BigInt {
    let result = super.call(
      "allowance",
      "allowance(address,address):(uint256)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(spender)]
    );

    return result[0].toBigInt();
  }

  try_allowance(owner: Address, spender: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "allowance",
      "allowance(address,address):(uint256)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(spender)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  approve(spender: Address, amount: BigInt): boolean {
    let result = super.call("approve", "approve(address,uint256):(bool)", [
      ethereum.Value.fromAddress(spender),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);

    return result[0].toBoolean();
  }

  try_approve(spender: Address, amount: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("approve", "approve(address,uint256):(bool)", [
      ethereum.Value.fromAddress(spender),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  balanceOf(account: Address): BigInt {
    let result = super.call("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(account)
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(account: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(account)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  base(): Address {
    let result = super.call("base", "base():(address)", []);

    return result[0].toAddress();
  }

  try_base(): ethereum.CallResult<Address> {
    let result = super.tryCall("base", "base():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  convertIndexToInvestment(_amount: BigInt): BigInt {
    let result = super.call(
      "convertIndexToInvestment",
      "convertIndexToInvestment(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_amount)]
    );

    return result[0].toBigInt();
  }

  try_convertIndexToInvestment(_amount: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "convertIndexToInvestment",
      "convertIndexToInvestment(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_amount)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  convertInvestmentToIndex(_amount: BigInt): BigInt {
    let result = super.call(
      "convertInvestmentToIndex",
      "convertInvestmentToIndex(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_amount)]
    );

    return result[0].toBigInt();
  }

  try_convertInvestmentToIndex(_amount: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "convertInvestmentToIndex",
      "convertInvestmentToIndex(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_amount)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  countDepositors(): BigInt {
    let result = super.call(
      "countDepositors",
      "countDepositors():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_countDepositors(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "countDepositors",
      "countDepositors():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  countPositions(): BigInt {
    let result = super.call("countPositions", "countPositions():(uint256)", []);

    return result[0].toBigInt();
  }

  try_countPositions(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "countPositions",
      "countPositions():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  decimals(): i32 {
    let result = super.call("decimals", "decimals():(uint8)", []);

    return result[0].toI32();
  }

  try_decimals(): ethereum.CallResult<i32> {
    let result = super.tryCall("decimals", "decimals():(uint8)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  decreaseAllowance(spender: Address, subtractedValue: BigInt): boolean {
    let result = super.call(
      "decreaseAllowance",
      "decreaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(subtractedValue)
      ]
    );

    return result[0].toBoolean();
  }

  try_decreaseAllowance(
    spender: Address,
    subtractedValue: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "decreaseAllowance",
      "decreaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(subtractedValue)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  externalPool(): BigInt {
    let result = super.call("externalPool", "externalPool():(uint256)", []);

    return result[0].toBigInt();
  }

  try_externalPool(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("externalPool", "externalPool():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  externalPoolByDepositor(
    param0: Address
  ): BrightRiskToken__externalPoolByDepositorResult {
    let result = super.call(
      "externalPoolByDepositor",
      "externalPoolByDepositor(address):(uint256,bool,uint256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return new BrightRiskToken__externalPoolByDepositorResult(
      result[0].toBigInt(),
      result[1].toBoolean(),
      result[2].toBigInt()
    );
  }

  try_externalPoolByDepositor(
    param0: Address
  ): ethereum.CallResult<BrightRiskToken__externalPoolByDepositorResult> {
    let result = super.tryCall(
      "externalPoolByDepositor",
      "externalPoolByDepositor(address):(uint256,bool,uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new BrightRiskToken__externalPoolByDepositorResult(
        value[0].toBigInt(),
        value[1].toBoolean(),
        value[2].toBigInt()
      )
    );
  }

  feeState(): BrightRiskToken__feeStateResult {
    let result = super.call(
      "feeState",
      "feeState():(address,uint256,uint256)",
      []
    );

    return new BrightRiskToken__feeStateResult(
      result[0].toAddress(),
      result[1].toBigInt(),
      result[2].toBigInt()
    );
  }

  try_feeState(): ethereum.CallResult<BrightRiskToken__feeStateResult> {
    let result = super.tryCall(
      "feeState",
      "feeState():(address,uint256,uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new BrightRiskToken__feeStateResult(
        value[0].toAddress(),
        value[1].toBigInt(),
        value[2].toBigInt()
      )
    );
  }

  getBase(): Address {
    let result = super.call("getBase", "getBase():(address)", []);

    return result[0].toAddress();
  }

  try_getBase(): ethereum.CallResult<Address> {
    let result = super.tryCall("getBase", "getBase():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getPriceFeed(): Address {
    let result = super.call("getPriceFeed", "getPriceFeed():(address)", []);

    return result[0].toAddress();
  }

  try_getPriceFeed(): ethereum.CallResult<Address> {
    let result = super.tryCall("getPriceFeed", "getPriceFeed():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getRoleAdmin(role: Bytes): Bytes {
    let result = super.call("getRoleAdmin", "getRoleAdmin(bytes32):(bytes32)", [
      ethereum.Value.fromFixedBytes(role)
    ]);

    return result[0].toBytes();
  }

  try_getRoleAdmin(role: Bytes): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "getRoleAdmin",
      "getRoleAdmin(bytes32):(bytes32)",
      [ethereum.Value.fromFixedBytes(role)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  getRoleMember(role: Bytes, index: BigInt): Address {
    let result = super.call(
      "getRoleMember",
      "getRoleMember(bytes32,uint256):(address)",
      [
        ethereum.Value.fromFixedBytes(role),
        ethereum.Value.fromUnsignedBigInt(index)
      ]
    );

    return result[0].toAddress();
  }

  try_getRoleMember(role: Bytes, index: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getRoleMember",
      "getRoleMember(bytes32,uint256):(address)",
      [
        ethereum.Value.fromFixedBytes(role),
        ethereum.Value.fromUnsignedBigInt(index)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getRoleMemberCount(role: Bytes): BigInt {
    let result = super.call(
      "getRoleMemberCount",
      "getRoleMemberCount(bytes32):(uint256)",
      [ethereum.Value.fromFixedBytes(role)]
    );

    return result[0].toBigInt();
  }

  try_getRoleMemberCount(role: Bytes): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getRoleMemberCount",
      "getRoleMemberCount(bytes32):(uint256)",
      [ethereum.Value.fromFixedBytes(role)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  hasRole(role: Bytes, account: Address): boolean {
    let result = super.call("hasRole", "hasRole(bytes32,address):(bool)", [
      ethereum.Value.fromFixedBytes(role),
      ethereum.Value.fromAddress(account)
    ]);

    return result[0].toBoolean();
  }

  try_hasRole(role: Bytes, account: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("hasRole", "hasRole(bytes32,address):(bool)", [
      ethereum.Value.fromFixedBytes(role),
      ethereum.Value.fromAddress(account)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  increaseAllowance(spender: Address, addedValue: BigInt): boolean {
    let result = super.call(
      "increaseAllowance",
      "increaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(addedValue)
      ]
    );

    return result[0].toBoolean();
  }

  try_increaseAllowance(
    spender: Address,
    addedValue: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "increaseAllowance",
      "increaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(addedValue)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  internalPool(): BigInt {
    let result = super.call("internalPool", "internalPool():(uint256)", []);

    return result[0].toBigInt();
  }

  try_internalPool(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("internalPool", "internalPool():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  listDepositors(offset: BigInt, limit: BigInt): Array<Address> {
    let result = super.call(
      "listDepositors",
      "listDepositors(uint256,uint256):(address[])",
      [
        ethereum.Value.fromUnsignedBigInt(offset),
        ethereum.Value.fromUnsignedBigInt(limit)
      ]
    );

    return result[0].toAddressArray();
  }

  try_listDepositors(
    offset: BigInt,
    limit: BigInt
  ): ethereum.CallResult<Array<Address>> {
    let result = super.tryCall(
      "listDepositors",
      "listDepositors(uint256,uint256):(address[])",
      [
        ethereum.Value.fromUnsignedBigInt(offset),
        ethereum.Value.fromUnsignedBigInt(limit)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddressArray());
  }

  listPositions(offset: BigInt, limit: BigInt): Array<Address> {
    let result = super.call(
      "listPositions",
      "listPositions(uint256,uint256):(address[])",
      [
        ethereum.Value.fromUnsignedBigInt(offset),
        ethereum.Value.fromUnsignedBigInt(limit)
      ]
    );

    return result[0].toAddressArray();
  }

  try_listPositions(
    offset: BigInt,
    limit: BigInt
  ): ethereum.CallResult<Array<Address>> {
    let result = super.tryCall(
      "listPositions",
      "listPositions(uint256,uint256):(address[])",
      [
        ethereum.Value.fromUnsignedBigInt(offset),
        ethereum.Value.fromUnsignedBigInt(limit)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddressArray());
  }

  minimumBaseDeposit(): BigInt {
    let result = super.call(
      "minimumBaseDeposit",
      "minimumBaseDeposit():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_minimumBaseDeposit(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "minimumBaseDeposit",
      "minimumBaseDeposit():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  nonces(owner: Address): BigInt {
    let result = super.call("nonces", "nonces(address):(uint256)", [
      ethereum.Value.fromAddress(owner)
    ]);

    return result[0].toBigInt();
  }

  try_nonces(owner: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("nonces", "nonces(address):(uint256)", [
      ethereum.Value.fromAddress(owner)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  paused(): boolean {
    let result = super.call("paused", "paused():(bool)", []);

    return result[0].toBoolean();
  }

  try_paused(): ethereum.CallResult<boolean> {
    let result = super.tryCall("paused", "paused():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  priceFeed(): Address {
    let result = super.call("priceFeed", "priceFeed():(address)", []);

    return result[0].toAddress();
  }

  try_priceFeed(): ethereum.CallResult<Address> {
    let result = super.tryCall("priceFeed", "priceFeed():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  symbol(): string {
    let result = super.call("symbol", "symbol():(string)", []);

    return result[0].toString();
  }

  try_symbol(): ethereum.CallResult<string> {
    let result = super.tryCall("symbol", "symbol():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  totalAtStake(): BigInt {
    let result = super.call("totalAtStake", "totalAtStake():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalAtStake(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalAtStake", "totalAtStake():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalSupply(): BigInt {
    let result = super.call("totalSupply", "totalSupply():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalSupply(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalSupply", "totalSupply():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalTVL(): BigInt {
    let result = super.call("totalTVL", "totalTVL():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalTVL(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalTVL", "totalTVL():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  transfer(recipient: Address, amount: BigInt): boolean {
    let result = super.call("transfer", "transfer(address,uint256):(bool)", [
      ethereum.Value.fromAddress(recipient),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);

    return result[0].toBoolean();
  }

  try_transfer(
    recipient: Address,
    amount: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall("transfer", "transfer(address,uint256):(bool)", [
      ethereum.Value.fromAddress(recipient),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  transferFrom(sender: Address, recipient: Address, amount: BigInt): boolean {
    let result = super.call(
      "transferFrom",
      "transferFrom(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(sender),
        ethereum.Value.fromAddress(recipient),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );

    return result[0].toBoolean();
  }

  try_transferFrom(
    sender: Address,
    recipient: Address,
    amount: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "transferFrom",
      "transferFrom(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(sender),
        ethereum.Value.fromAddress(recipient),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }
}

export class __BrightRiskToken_initCall extends ethereum.Call {
  get inputs(): __BrightRiskToken_initCall__Inputs {
    return new __BrightRiskToken_initCall__Inputs(this);
  }

  get outputs(): __BrightRiskToken_initCall__Outputs {
    return new __BrightRiskToken_initCall__Outputs(this);
  }
}

export class __BrightRiskToken_initCall__Inputs {
  _call: __BrightRiskToken_initCall;

  constructor(call: __BrightRiskToken_initCall) {
    this._call = call;
  }

  get _feeSettings(): __BrightRiskToken_initCall_feeSettingsStruct {
    return changetype<__BrightRiskToken_initCall_feeSettingsStruct>(
      this._call.inputValues[0].value.toTuple()
    );
  }

  get _baseAsset(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _priceFeed(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class __BrightRiskToken_initCall__Outputs {
  _call: __BrightRiskToken_initCall;

  constructor(call: __BrightRiskToken_initCall) {
    this._call = call;
  }
}

export class __BrightRiskToken_initCall_feeSettingsStruct extends ethereum.Tuple {
  get feeRecipient(): Address {
    return this[0].toAddress();
  }

  get streamingFeePercentage(): BigInt {
    return this[1].toBigInt();
  }

  get lastStreamingFeeTimestamp(): BigInt {
    return this[2].toBigInt();
  }
}

export class AddControllerCall extends ethereum.Call {
  get inputs(): AddControllerCall__Inputs {
    return new AddControllerCall__Inputs(this);
  }

  get outputs(): AddControllerCall__Outputs {
    return new AddControllerCall__Outputs(this);
  }
}

export class AddControllerCall__Inputs {
  _call: AddControllerCall;

  constructor(call: AddControllerCall) {
    this._call = call;
  }

  get _controllerAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class AddControllerCall__Outputs {
  _call: AddControllerCall;

  constructor(call: AddControllerCall) {
    this._call = call;
  }
}

export class AdjustStreamingFeeCall extends ethereum.Call {
  get inputs(): AdjustStreamingFeeCall__Inputs {
    return new AdjustStreamingFeeCall__Inputs(this);
  }

  get outputs(): AdjustStreamingFeeCall__Outputs {
    return new AdjustStreamingFeeCall__Outputs(this);
  }
}

export class AdjustStreamingFeeCall__Inputs {
  _call: AdjustStreamingFeeCall;

  constructor(call: AdjustStreamingFeeCall) {
    this._call = call;
  }

  get _feeSettings(): AdjustStreamingFeeCall_feeSettingsStruct {
    return changetype<AdjustStreamingFeeCall_feeSettingsStruct>(
      this._call.inputValues[0].value.toTuple()
    );
  }
}

export class AdjustStreamingFeeCall__Outputs {
  _call: AdjustStreamingFeeCall;

  constructor(call: AdjustStreamingFeeCall) {
    this._call = call;
  }
}

export class AdjustStreamingFeeCall_feeSettingsStruct extends ethereum.Tuple {
  get feeRecipient(): Address {
    return this[0].toAddress();
  }

  get streamingFeePercentage(): BigInt {
    return this[1].toBigInt();
  }

  get lastStreamingFeeTimestamp(): BigInt {
    return this[2].toBigInt();
  }
}

export class ApproveCall extends ethereum.Call {
  get inputs(): ApproveCall__Inputs {
    return new ApproveCall__Inputs(this);
  }

  get outputs(): ApproveCall__Outputs {
    return new ApproveCall__Outputs(this);
  }
}

export class ApproveCall__Inputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ApproveCall__Outputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class BurnCall extends ethereum.Call {
  get inputs(): BurnCall__Inputs {
    return new BurnCall__Inputs(this);
  }

  get outputs(): BurnCall__Outputs {
    return new BurnCall__Outputs(this);
  }
}

export class BurnCall__Inputs {
  _call: BurnCall;

  constructor(call: BurnCall) {
    this._call = call;
  }

  get _indexTokenAmount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class BurnCall__Outputs {
  _call: BurnCall;

  constructor(call: BurnCall) {
    this._call = call;
  }
}

export class CallUnstakeAtCall extends ethereum.Call {
  get inputs(): CallUnstakeAtCall__Inputs {
    return new CallUnstakeAtCall__Inputs(this);
  }

  get outputs(): CallUnstakeAtCall__Outputs {
    return new CallUnstakeAtCall__Outputs(this);
  }
}

export class CallUnstakeAtCall__Inputs {
  _call: CallUnstakeAtCall;

  constructor(call: CallUnstakeAtCall) {
    this._call = call;
  }

  get _controllerAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class CallUnstakeAtCall__Outputs {
  _call: CallUnstakeAtCall;

  constructor(call: CallUnstakeAtCall) {
    this._call = call;
  }
}

export class DecreaseAllowanceCall extends ethereum.Call {
  get inputs(): DecreaseAllowanceCall__Inputs {
    return new DecreaseAllowanceCall__Inputs(this);
  }

  get outputs(): DecreaseAllowanceCall__Outputs {
    return new DecreaseAllowanceCall__Outputs(this);
  }
}

export class DecreaseAllowanceCall__Inputs {
  _call: DecreaseAllowanceCall;

  constructor(call: DecreaseAllowanceCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get subtractedValue(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class DecreaseAllowanceCall__Outputs {
  _call: DecreaseAllowanceCall;

  constructor(call: DecreaseAllowanceCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class DepositCall extends ethereum.Call {
  get inputs(): DepositCall__Inputs {
    return new DepositCall__Inputs(this);
  }

  get outputs(): DepositCall__Outputs {
    return new DepositCall__Outputs(this);
  }
}

export class DepositCall__Inputs {
  _call: DepositCall;

  constructor(call: DepositCall) {
    this._call = call;
  }

  get _amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class DepositCall__Outputs {
  _call: DepositCall;

  constructor(call: DepositCall) {
    this._call = call;
  }
}

export class DepositInternalCall extends ethereum.Call {
  get inputs(): DepositInternalCall__Inputs {
    return new DepositInternalCall__Inputs(this);
  }

  get outputs(): DepositInternalCall__Outputs {
    return new DepositInternalCall__Outputs(this);
  }
}

export class DepositInternalCall__Inputs {
  _call: DepositInternalCall;

  constructor(call: DepositInternalCall) {
    this._call = call;
  }

  get _amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class DepositInternalCall__Outputs {
  _call: DepositInternalCall;

  constructor(call: DepositInternalCall) {
    this._call = call;
  }
}

export class GrantRoleCall extends ethereum.Call {
  get inputs(): GrantRoleCall__Inputs {
    return new GrantRoleCall__Inputs(this);
  }

  get outputs(): GrantRoleCall__Outputs {
    return new GrantRoleCall__Outputs(this);
  }
}

export class GrantRoleCall__Inputs {
  _call: GrantRoleCall;

  constructor(call: GrantRoleCall) {
    this._call = call;
  }

  get role(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get account(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class GrantRoleCall__Outputs {
  _call: GrantRoleCall;

  constructor(call: GrantRoleCall) {
    this._call = call;
  }
}

export class IncreaseAllowanceCall extends ethereum.Call {
  get inputs(): IncreaseAllowanceCall__Inputs {
    return new IncreaseAllowanceCall__Inputs(this);
  }

  get outputs(): IncreaseAllowanceCall__Outputs {
    return new IncreaseAllowanceCall__Outputs(this);
  }
}

export class IncreaseAllowanceCall__Inputs {
  _call: IncreaseAllowanceCall;

  constructor(call: IncreaseAllowanceCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get addedValue(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class IncreaseAllowanceCall__Outputs {
  _call: IncreaseAllowanceCall;

  constructor(call: IncreaseAllowanceCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class PauseCall extends ethereum.Call {
  get inputs(): PauseCall__Inputs {
    return new PauseCall__Inputs(this);
  }

  get outputs(): PauseCall__Outputs {
    return new PauseCall__Outputs(this);
  }
}

export class PauseCall__Inputs {
  _call: PauseCall;

  constructor(call: PauseCall) {
    this._call = call;
  }
}

export class PauseCall__Outputs {
  _call: PauseCall;

  constructor(call: PauseCall) {
    this._call = call;
  }
}

export class PermitCall extends ethereum.Call {
  get inputs(): PermitCall__Inputs {
    return new PermitCall__Inputs(this);
  }

  get outputs(): PermitCall__Outputs {
    return new PermitCall__Outputs(this);
  }
}

export class PermitCall__Inputs {
  _call: PermitCall;

  constructor(call: PermitCall) {
    this._call = call;
  }

  get owner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get spender(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get value(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get deadline(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get v(): i32 {
    return this._call.inputValues[4].value.toI32();
  }

  get r(): Bytes {
    return this._call.inputValues[5].value.toBytes();
  }

  get s(): Bytes {
    return this._call.inputValues[6].value.toBytes();
  }
}

export class PermitCall__Outputs {
  _call: PermitCall;

  constructor(call: PermitCall) {
    this._call = call;
  }
}

export class RemoveControllerCall extends ethereum.Call {
  get inputs(): RemoveControllerCall__Inputs {
    return new RemoveControllerCall__Inputs(this);
  }

  get outputs(): RemoveControllerCall__Outputs {
    return new RemoveControllerCall__Outputs(this);
  }
}

export class RemoveControllerCall__Inputs {
  _call: RemoveControllerCall;

  constructor(call: RemoveControllerCall) {
    this._call = call;
  }

  get _controllerAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class RemoveControllerCall__Outputs {
  _call: RemoveControllerCall;

  constructor(call: RemoveControllerCall) {
    this._call = call;
  }
}

export class RenounceRoleCall extends ethereum.Call {
  get inputs(): RenounceRoleCall__Inputs {
    return new RenounceRoleCall__Inputs(this);
  }

  get outputs(): RenounceRoleCall__Outputs {
    return new RenounceRoleCall__Outputs(this);
  }
}

export class RenounceRoleCall__Inputs {
  _call: RenounceRoleCall;

  constructor(call: RenounceRoleCall) {
    this._call = call;
  }

  get role(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get account(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class RenounceRoleCall__Outputs {
  _call: RenounceRoleCall;

  constructor(call: RenounceRoleCall) {
    this._call = call;
  }
}

export class RevokeRoleCall extends ethereum.Call {
  get inputs(): RevokeRoleCall__Inputs {
    return new RevokeRoleCall__Inputs(this);
  }

  get outputs(): RevokeRoleCall__Outputs {
    return new RevokeRoleCall__Outputs(this);
  }
}

export class RevokeRoleCall__Inputs {
  _call: RevokeRoleCall;

  constructor(call: RevokeRoleCall) {
    this._call = call;
  }

  get role(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get account(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class RevokeRoleCall__Outputs {
  _call: RevokeRoleCall;

  constructor(call: RevokeRoleCall) {
    this._call = call;
  }
}

export class SetInternalPoolReadyToStakeCall extends ethereum.Call {
  get inputs(): SetInternalPoolReadyToStakeCall__Inputs {
    return new SetInternalPoolReadyToStakeCall__Inputs(this);
  }

  get outputs(): SetInternalPoolReadyToStakeCall__Outputs {
    return new SetInternalPoolReadyToStakeCall__Outputs(this);
  }
}

export class SetInternalPoolReadyToStakeCall__Inputs {
  _call: SetInternalPoolReadyToStakeCall;

  constructor(call: SetInternalPoolReadyToStakeCall) {
    this._call = call;
  }

  get _amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetInternalPoolReadyToStakeCall__Outputs {
  _call: SetInternalPoolReadyToStakeCall;

  constructor(call: SetInternalPoolReadyToStakeCall) {
    this._call = call;
  }
}

export class SetMinimumDepositCall extends ethereum.Call {
  get inputs(): SetMinimumDepositCall__Inputs {
    return new SetMinimumDepositCall__Inputs(this);
  }

  get outputs(): SetMinimumDepositCall__Outputs {
    return new SetMinimumDepositCall__Outputs(this);
  }
}

export class SetMinimumDepositCall__Inputs {
  _call: SetMinimumDepositCall;

  constructor(call: SetMinimumDepositCall) {
    this._call = call;
  }

  get _newMin(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetMinimumDepositCall__Outputs {
  _call: SetMinimumDepositCall;

  constructor(call: SetMinimumDepositCall) {
    this._call = call;
  }
}

export class SetSwapRewardsViaAtCall extends ethereum.Call {
  get inputs(): SetSwapRewardsViaAtCall__Inputs {
    return new SetSwapRewardsViaAtCall__Inputs(this);
  }

  get outputs(): SetSwapRewardsViaAtCall__Outputs {
    return new SetSwapRewardsViaAtCall__Outputs(this);
  }
}

export class SetSwapRewardsViaAtCall__Inputs {
  _call: SetSwapRewardsViaAtCall;

  constructor(call: SetSwapRewardsViaAtCall) {
    this._call = call;
  }

  get _swapRewardsVia(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _controllerAddress(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class SetSwapRewardsViaAtCall__Outputs {
  _call: SetSwapRewardsViaAtCall;

  constructor(call: SetSwapRewardsViaAtCall) {
    this._call = call;
  }
}

export class SetSwapViaAtCall extends ethereum.Call {
  get inputs(): SetSwapViaAtCall__Inputs {
    return new SetSwapViaAtCall__Inputs(this);
  }

  get outputs(): SetSwapViaAtCall__Outputs {
    return new SetSwapViaAtCall__Outputs(this);
  }
}

export class SetSwapViaAtCall__Inputs {
  _call: SetSwapViaAtCall;

  constructor(call: SetSwapViaAtCall) {
    this._call = call;
  }

  get _swapVia(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _controllerAddress(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class SetSwapViaAtCall__Outputs {
  _call: SetSwapViaAtCall;

  constructor(call: SetSwapViaAtCall) {
    this._call = call;
  }
}

export class StakeAtCall extends ethereum.Call {
  get inputs(): StakeAtCall__Inputs {
    return new StakeAtCall__Inputs(this);
  }

  get outputs(): StakeAtCall__Outputs {
    return new StakeAtCall__Outputs(this);
  }
}

export class StakeAtCall__Inputs {
  _call: StakeAtCall;

  constructor(call: StakeAtCall) {
    this._call = call;
  }

  get _controllerAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _maxAmount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _maxDepositors(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _iterations(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class StakeAtCall__Outputs {
  _call: StakeAtCall;

  constructor(call: StakeAtCall) {
    this._call = call;
  }
}

export class TransferCall extends ethereum.Call {
  get inputs(): TransferCall__Inputs {
    return new TransferCall__Inputs(this);
  }

  get outputs(): TransferCall__Outputs {
    return new TransferCall__Outputs(this);
  }
}

export class TransferCall__Inputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get recipient(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class TransferCall__Outputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class TransferFromCall extends ethereum.Call {
  get inputs(): TransferFromCall__Inputs {
    return new TransferFromCall__Inputs(this);
  }

  get outputs(): TransferFromCall__Outputs {
    return new TransferFromCall__Outputs(this);
  }
}

export class TransferFromCall__Inputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get sender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get recipient(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferFromCall__Outputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class UnpauseCall extends ethereum.Call {
  get inputs(): UnpauseCall__Inputs {
    return new UnpauseCall__Inputs(this);
  }

  get outputs(): UnpauseCall__Outputs {
    return new UnpauseCall__Outputs(this);
  }
}

export class UnpauseCall__Inputs {
  _call: UnpauseCall;

  constructor(call: UnpauseCall) {
    this._call = call;
  }
}

export class UnpauseCall__Outputs {
  _call: UnpauseCall;

  constructor(call: UnpauseCall) {
    this._call = call;
  }
}

export class UnstakeAtCall extends ethereum.Call {
  get inputs(): UnstakeAtCall__Inputs {
    return new UnstakeAtCall__Inputs(this);
  }

  get outputs(): UnstakeAtCall__Outputs {
    return new UnstakeAtCall__Outputs(this);
  }
}

export class UnstakeAtCall__Inputs {
  _call: UnstakeAtCall;

  constructor(call: UnstakeAtCall) {
    this._call = call;
  }

  get _controllerAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class UnstakeAtCall__Outputs {
  _call: UnstakeAtCall;

  constructor(call: UnstakeAtCall) {
    this._call = call;
  }
}
